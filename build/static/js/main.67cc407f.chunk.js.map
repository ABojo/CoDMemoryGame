{"version":3,"sources":["components/Navbar.js","components/GameGrid.js","components/Scorebox.js","images/rust.jpg","images/miami.jpg","images/nuketown.jpg","images/raid.jpg","images/slums.jpg","images/standoff.png","images/hacienda.jpg","images/shoothouse.jpg","images/summit.jpg","images/skidrow.png","images/invasion.png","images/garrison.jpg","images/checkmate.png","images/crossroads.jpg","images/village.png","images/fallen.png","images/crash.jpg","images/shipment.jpg","images/highrise.png","images/infection.png","images/stronghold.png","images/combine.png","images/redwood.jpg","getMaps.js","randomMaps.js","delay.js","showMessage.js","App.js","index.js"],"names":["Navbar","className","GameGrid","props","maps","onMapClick","map","onClick","name","src","path","alt","id","Scorebox","currentScore","highScore","mapObjects","rust","miami","nuketown","raid","slums","standoff","hacienda","shoothouse","summit","skidrow","invasion","garrison","checkmate","crossroads","village","fallen","crash","shipment","highrise","infection","stronghold","combine","redwood","mapName","slice","indexOf","charAt","toUpperCase","uniqid","randomMaps","n","length","randomMap","Math","floor","random","includes","push","delay","ms","Promise","resolve","setTimeout","showMessage","success","message","a","instructions","document","createElement","textContent","classList","add","body","append","remove","App","useState","visibleMaps","setVisibleMaps","clickedMaps","setClickedMaps","setCurrentScore","setHighScore","isLoading","setLoading","showRandomMaps","addClickedMap","handleMapClick","useEffect","then","Fragment","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.67cc407f.chunk.js","sourcesContent":["import navbarStyles from '../styles/navbarStyles.css';\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <h1 className=\"navbar__title\">CoD Memory Game</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import styles from '../styles/gridStyles.css';\r\n\r\nfunction GameGrid(props) {\r\n  const { maps, onMapClick } = props;\r\n\r\n  return (\r\n    <div className=\"game-grid\">\r\n      {maps.map((map) => (\r\n        <div\r\n          className=\"game-grid__item\"\r\n          key={map.id}\r\n          onClick={() => {\r\n            onMapClick(map);\r\n          }}\r\n        >\r\n          <div className=\"game-grid__overlay\"></div>\r\n          <h1 className=\"game-grid__name\">{map.name}</h1>\r\n          <img src={map.path} alt={map.name} className=\"game-grid__image\"></img>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameGrid;\r\n","import scoreboxStyles from '../styles/scoreboxStyles.css';\r\n\r\nfunction Scorebox(props) {\r\n  const { currentScore, highScore } = props;\r\n  return (\r\n    <div className=\"scorebox\">\r\n      <div className=\"scorebox__scores\">\r\n        <h1 className=\"score-current\">Current Score: {currentScore}</h1>\r\n        <h1 className=\"score-high\">High Score: {highScore}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scorebox;\r\n","export default __webpack_public_path__ + \"static/media/rust.93cb964e.jpg\";","export default __webpack_public_path__ + \"static/media/miami.27802d09.jpg\";","export default __webpack_public_path__ + \"static/media/nuketown.7e42553f.jpg\";","export default __webpack_public_path__ + \"static/media/raid.ce7e0f12.jpg\";","export default __webpack_public_path__ + \"static/media/slums.5f9921fe.jpg\";","export default __webpack_public_path__ + \"static/media/standoff.6cd96e8f.png\";","export default __webpack_public_path__ + \"static/media/hacienda.f55bdff2.jpg\";","export default __webpack_public_path__ + \"static/media/shoothouse.cd35830f.jpg\";","export default __webpack_public_path__ + \"static/media/summit.036a925d.jpg\";","export default __webpack_public_path__ + \"static/media/skidrow.92dd15aa.png\";","export default __webpack_public_path__ + \"static/media/invasion.4ba3e742.png\";","export default __webpack_public_path__ + \"static/media/garrison.5cd8cfb1.jpg\";","export default __webpack_public_path__ + \"static/media/checkmate.f2ac3b10.png\";","export default __webpack_public_path__ + \"static/media/crossroads.0314f37c.jpg\";","export default __webpack_public_path__ + \"static/media/village.b91858fb.png\";","export default __webpack_public_path__ + \"static/media/fallen.a4018329.png\";","export default __webpack_public_path__ + \"static/media/crash.6a79900f.jpg\";","export default __webpack_public_path__ + \"static/media/shipment.f295db70.jpg\";","export default __webpack_public_path__ + \"static/media/highrise.ba829ebb.png\";","export default __webpack_public_path__ + \"static/media/infection.ac62aebe.png\";","export default __webpack_public_path__ + \"static/media/stronghold.10b14bff.png\";","export default __webpack_public_path__ + \"static/media/combine.bdbb7d3f.png\";","export default __webpack_public_path__ + \"static/media/redwood.78fb551f.jpg\";","import rust from './images/rust.jpg';\r\nimport miami from './images/miami.jpg';\r\nimport nuketown from './images/nuketown.jpg';\r\nimport raid from './images/raid.jpg';\r\nimport slums from './images/slums.jpg';\r\nimport standoff from './images/standoff.png';\r\nimport hacienda from './images/hacienda.jpg';\r\nimport shoothouse from './images/shoothouse.jpg';\r\nimport summit from './images/summit.jpg';\r\nimport skidrow from './images/skidrow.png';\r\nimport invasion from './images/invasion.png';\r\nimport garrison from './images/garrison.jpg';\r\nimport checkmate from './images/checkmate.png';\r\nimport crossroads from './images/crossroads.jpg';\r\nimport village from './images/village.png';\r\nimport fallen from './images/fallen.png';\r\nimport crash from './images/crash.jpg';\r\nimport shipment from './images/shipment.jpg';\r\nimport highrise from './images/highrise.png';\r\nimport infection from './images/infection.png';\r\nimport stronghold from './images/stronghold.png';\r\nimport combine from './images/combine.png';\r\nimport redwood from './images/redwood.jpg';\r\n\r\nimport uniqid from 'uniqid';\r\n\r\nconst images = [\r\n  rust,\r\n  miami,\r\n  nuketown,\r\n  raid,\r\n  slums,\r\n  standoff,\r\n  hacienda,\r\n  shoothouse,\r\n  summit,\r\n  skidrow,\r\n  invasion,\r\n  garrison,\r\n  checkmate,\r\n  crossroads,\r\n  village,\r\n  fallen,\r\n  crash,\r\n  shipment,\r\n  highrise,\r\n  infection,\r\n  stronghold,\r\n  combine,\r\n  redwood,\r\n];\r\n\r\nconst mapObjects = images.map((path) => {\r\n  const mapName = path.slice(\r\n    path.indexOf('media/') + 6,\r\n    path.indexOf('.', path.indexOf('.') + 1)\r\n  );\r\n\r\n  return {\r\n    path: path,\r\n    name: `${mapName.charAt(0).toUpperCase()}${mapName.slice(1)}`,\r\n    id: uniqid(),\r\n  };\r\n});\r\n\r\nexport default mapObjects;\r\n","import maps from './getMaps';\r\n\r\nfunction randomMaps(n) {\r\n  const randomMaps = [];\r\n\r\n  while (randomMaps.length < n) {\r\n    const randomMap = maps[Math.floor(Math.random() * maps.length)];\r\n    if (!randomMaps.includes(randomMap)) {\r\n      randomMaps.push(randomMap);\r\n    }\r\n  }\r\n\r\n  return randomMaps;\r\n}\r\n\r\nexport default randomMaps;\r\n","export default function delay(ms) {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, ms);\r\n  });\r\n}\r\n","import delay from './delay';\r\n\r\nconst showMessage = async (success, message) => {\r\n  const instructions = document.createElement('div');\r\n  instructions.className = 'instructions';\r\n  instructions.textContent = message;\r\n  if (!success) instructions.classList.add('lose');\r\n\r\n  document.body.append(instructions);\r\n  await delay(5000);\r\n  instructions.remove();\r\n};\r\n\r\nexport default showMessage;\r\n","import React, { useEffect, useState } from 'react';\nimport baseStyles from './styles/baseStyles.css';\nimport Navbar from './components/Navbar';\nimport GameGrid from './components/GameGrid';\nimport Scorebox from './components/Scorebox';\nimport randomMaps from './randomMaps';\nimport showMessage from './showMessage';\nimport delay from './delay';\n\nfunction App() {\n  const [visibleMaps, setVisibleMaps] = useState([]);\n  const [clickedMaps, setClickedMaps] = useState([]);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [isLoading, setLoading] = useState(true);\n\n  const showRandomMaps = () => {\n    setVisibleMaps(randomMaps(3));\n  };\n\n  const resetScore = () => {\n    setCurrentScore(0);\n  };\n\n  const resetClickedMaps = () => {\n    setClickedMaps([]);\n  };\n\n  const incrementScore = () => {\n    setCurrentScore(currentScore + 1);\n    if (currentScore + 1 > highScore) setHighScore(currentScore + 1);\n  };\n\n  const addClickedMap = (map) => {\n    setClickedMaps([...clickedMaps, map]);\n  };\n\n  const handleMapClick = async (map) => {\n    if (clickedMaps.includes(map)) {\n      resetScore();\n      resetClickedMaps();\n      showMessage(false, `You already clicked ${map.name}, game over!`);\n    } else {\n      incrementScore();\n      addClickedMap(map);\n      showMessage(true, `You got a point for ${map.name}, good job!`);\n    }\n\n    showRandomMaps();\n    setLoading(true);\n  };\n\n  //Show instructions message after component is mounted\n  useEffect(() => {\n    showMessage(\n      true,\n      'If you click the same map twice your score will be reset to zero!'\n    );\n\n    showRandomMaps();\n  }, []);\n\n  //Runs spinner for two seconds after mount or update\n  useEffect(() => {\n    if (isLoading) {\n      delay(1500).then(() => {\n        setLoading(false);\n      });\n    }\n  });\n\n  return (\n    <React.Fragment>\n      <Navbar />\n      <Scorebox currentScore={currentScore} highScore={highScore} />\n      {isLoading ? (\n        <div className=\"lds-ring\">\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      ) : (\n        <GameGrid maps={visibleMaps} onMapClick={handleMapClick} />\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}